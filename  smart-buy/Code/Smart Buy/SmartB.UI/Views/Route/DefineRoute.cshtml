@model List<SmartB.UI.Models.EntityFramework.Market>

@{
    ViewBag.Title = "DefineRoute";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}

@section head
{
    <script type="text/javascript"
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAmQi6XuUHARe_gzLWFpKWzZSu34ZaWv1Q&sensor=false&libraries=places"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/RouteBoxer.js")"></script>

    <script type="text/javascript">
        var map, fromAddress, toAddress, fromLocation, toLocation, directionsDisplay, directionsService, boxes;
        var data = { };
        var rboxer = new RouteBoxer();
        var distance = 0.5; // km
        var marketList = create_marketList();
        var boxpolys = null;

        function initialize() {
            var mapOptions = {
                center: new google.maps.LatLng(10.791658, 106.658163),
                zoom: 12
            };
            map = new google.maps.Map(document.getElementById("map-canvas"),
                mapOptions);
            directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
            directionsDisplay.setMap(map);
            directionsService = new google.maps.DirectionsService();

            fromAddress = new google.maps.places.Autocomplete(document.getElementById('FromAddress'), { types: ['geocode'] });
            toAddress = new google.maps.places.Autocomplete(document.getElementById('ToAddress'), { types: ['geocode'] });
            
            google.maps.event.addListener(fromAddress, 'place_changed', function () {
                var place = fromAddress.getPlace();
                fromLocation = place.geometry.location;
            });
            
            google.maps.event.addListener(toAddress, 'place_changed', function () {
                var place = toAddress.getPlace();
                toLocation = place.geometry.location;
            });
        }

        function calcRoute(start, end) {
            var pStart = new google.maps.LatLng(start.lat(), start.lng());
            var pEnd = new google.maps.LatLng(end.lat(), end.lng());
            
            var request = {
                origin: pStart,
                destination: pEnd,
                travelMode: google.maps.TravelMode.DRIVING
            };
            directionsService.route(request, function(result, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(result);
                    
                    // Box the overview path of the first route
                    var path = result.routes[0].overview_path;
                    boxes = rboxer.box(path, distance);

                    //drawBoxes(boxes);
                    search_market(boxes);
                }
            });
        }
        google.maps.event.addDomListener(window, 'load', initialize);

        // Draw the array of boxes as polylines on the map
        function drawBoxes(boxes) {
            boxpolys = new Array(boxes.length);
            for (var i = 0; i < boxes.length; i++) {
                boxpolys[i] = new google.maps.Rectangle({
                    bounds: boxes[i],
                    fillOpacity: 0,
                    strokeOpacity: 1.0,
                    strokeColor: '#000000',
                    strokeWeight: 1,
                    map: map
                });
            }
        }

        function create_marker(place) {
            var marker = new google.maps.Marker({
                position: place.position,
                map: map,
                title: place.title,
                animation: google.maps.Animation.DROP
            });
        }

        function is_inBound(boxes, location) {
            for (var i = 0; i < boxes.length; i++) {
                var bound = boxes[i];
                if (bound.contains(location)) {
                    return true;
                }
            }
            return false;
        }

        function create_marketList() {
            var list = [];
            var lat, lng, position;
            @foreach (var market in Model)
            {
                if (market.Latitude != null && market.Longitude != null)
                {
                    <text>
            lat = @market.Latitude;
            lng = @market.Longitude;
            position = new google.maps.LatLng(lat, lng);
            var m = {
                id: @market.Id,
                position: position,
                title: '@Html.Raw(HttpUtility.HtmlDecode(market.Name))'
            };
            list.push(m);
                    </text>
                }
            }
            return list;
        }

        function search_market(boxes) {
            for (var i = 0; i < marketList.length; i++) {
                if (is_inBound(boxes, marketList[i].position)) {
                    var tmp = $('#MarketId').val();
                    if (tmp != "") {
                        tmp += ',' + marketList[i].id;
                    } else {
                        tmp = marketList[i].id;
                    }
                    $('#MarketId').val(tmp);
                    create_marker(marketList[i]);
                }
            }
        }

        function save_waypoints() {
            var w = [], wp;
            var rleg = directionsDisplay.directions.routes[0].legs[0];
            data.start = { 'lat': rleg.start_location.lat(), 'lng': rleg.start_location.lng() };
            data.end = { 'lat': rleg.end_location.lat(), 'lng': rleg.end_location.lng() };
            wp = rleg.via_waypoints;
            for (var i = 0; i < wp.length; i++) w[i] = [wp[i].lat(), wp[i].lng()];
            data.waypoints = w;

            var str = JSON.stringify(data);
            return str;
        }

        function set_route(way) {
            var wp = [];
            for (var i = 0; i < way.waypoints.length; i++)
                wp[i] = { 'location': new google.maps.LatLng(way.waypoints[i][0], way.waypoints[i][1]), 'stopover': false };

            var request = {
                origin: new google.maps.LatLng(way.start.lat, way.start.lng),
                destination: new google.maps.LatLng(way.end.lat, way.end.lng),
                waypoints: wp,
                travelMode: google.maps.TravelMode.DRIVING
            };
            directionsService.route(request, function (result, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(result);
                }
            });
        }
        
        $(document).ready(function() {
            $('#GetWay').click(function() {
                $('#JsonRoute').val("");
                $('#MarketId').val("");
                calcRoute(fromLocation, toLocation);
            }); // end click

            $('#SaveRoute').click(function() {
                $('#JsonRoute').val(save_waypoints);
                $('#MapForm').submit();
            }); // end click

            $('#Again').click(function() {
                var str = $('#JsonRoute').val();
                var way = eval('(' + str + ')');
                set_route(way);
            }); // end click
        }); // end ready
    </script>
}

<div id="top-image" class="top-image1">
    <div class="container">
        <div id="top-image-caption">
            <h2>Định nghĩa đường đi</h2>
        </div>
    </div>
</div>

<div id="breadcrumbs">
    <div class="container">
        <div class="row">
            <div class="span8">
                <ul class="breadcrumb">
                    <li>
                        <a href="#">Trang chủ</a>
                        <span class="divider">/</span>
                    </li>
                    <li>
                        <a href="#">Tài khoản</a>
                        <span class="divider">/</span>
                    </li>
                    <li>
                        <p>Định nghĩa đường đi</p>
                    </li>
                </ul>
            </div>

            <div class="span4">
            </div>
        </div>
    </div>
</div>

<div class="main-content">
    <div class="container">
        @if (TempData["DefineRoute"] != null)
        {
            <div class="message-box ok-message-box clearfix">
                <div class="message-icon-box">
                    <i class="icon-ok"></i>
                </div>

                <div class="message-container">
                    <h3>Định nghĩa đường đi thành công!</h3>
                </div>
            </div>
        }
        @Html.ValidationSummary(false)

        <label for="FromAddress">Nơi đi</label>
        <input type="text" id="FromAddress" placeholder="Địa chỉ đi" style="width: 400px" />
        <label for="ToAddress">Nơi đến</label>
        <input type="text" id="ToAddress" placeholder="Địa chỉ đến" style="width: 400px" />
        @using (Html.BeginForm("DefineRoute", "Route", FormMethod.Post, new { id = "MapForm" }))
        {
            <input type="hidden" id="MarketId" name="MarketId" />
            <input type="hidden" id="JsonRoute" name="Route" />
            <div class="stylish-button">
                <a id="GetWay">
                    <i class="icon-map-marker"></i>
                    Tìm đường
                </a>
            </div>
            <div class="stylish-button">
                <a id="SaveRoute">
                    <i class="icon-save"></i>
                    Lưu lại
                </a>
            </div>
        }


        <br />

        <h4>Bản đồ khu vực</h4>
        <div class="google-map fadeDown">
            <div id="map-canvas" />
        </div>
    </div>
    <br />
    <br />
</div>
