@{
    ViewBag.Title = "UploadProduct";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model SmartB.UI.Models.ListSellProductModel

@section headScript
{
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Metro/js/metro/metro-tab-control.js")"></script>
}

<script>

    $(document).ready(function () {
        $('table.table').each(function () {
            var currentPage = 0;
            var numPerPage = 10;
            var $table = $(this);
            $table.bind('repaginate', function () {
                $table.find('tbody tr').hide().slice(currentPage * numPerPage, (currentPage + 1) * numPerPage).show();
            });
            $table.trigger('repaginate');
            var numRows = $table.find('tbody tr').length;
            var numPages = Math.ceil(numRows / numPerPage);
            var $pager = $('<div class="pager" style="text-align:left"></div>');
            for (var page = 0; page < numPages +1; page++) {
                $('<span class="page-number "></span>').text(page + 1).bind('click', {
                    newPage: page
                }, function (event) {
                    currentPage = event.data['newPage'];
                    $table.trigger('repaginate');
                    $(this).addClass('active').siblings().removeClass('active');
                }).appendTo($pager).addClass('clickable');
            }
            $pager.insertAfter($table).find('span.page-number:first').addClass('active');
        });
    });
    function saveProduct(index, maxCorrect) {
        var productId = $("#ProductId" + index).val();
        var productName = $("#ProductName" + index).val();
        var productMarketName = $("#ProductMarketName" + index).val();
        var productPrice = $("#ProductPrice" + index).val();

        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveProductError", "Product")',
            data: { ProductId: productId, ProductName: productName, ProductMarketName: productMarketName, ProductPrice: productPrice },
            cache: true,
            success: function (result) {
                if (result.error.length == 0) {
                    var stt = parseInt($('#ProductTable tr:last #STT').html()) + 1;
                    var id = result.id;
                    $("#ErrorArea").html("");
                    $("#ProductTable tr:last").after("<tr id='product_"+id+"' style='display: table-row;'><td id='STT'>" + stt + "</td><td style='width:187px'><input readonly value='" + productName +
                                             "'></input></td><td style='width:202px'><input readonly value='" + productMarketName + "'>" +
                                            "</input></td><td style='width:176px'><input readonly value='" + productPrice + "'>" +
                                            "</input></td><td><input type='button' value='X' style='color:red;font-weight:bold' onclick='deleteProduct("+id+")'></input><td></tr>")
                    $("#ErrorProduct tr#ErrorProductTD" + index).remove();
                }
                else {
                    console.log(error);
                    var errordisp = "";
                    $.each(error.error, function (index, value) {
                        errordisp += "<label style='color: red'>" + value + "</label>"
                    });
                    $("#ErrorArea").html(errordisp);
                    if(error.error.toString() == "Sản phẩm đã có.")
                    {
                        var message = confirm("Sản phẩm đã có, bạn có muốn cập nhật sản phẩm này?")
                        if(message == true)
                        {
                            if(error.id) {
                                $("#product_"+error.id).find("td").find("input")[2].value = error.updatedPrice;
                                $("#ErrorProduct tr#ErrorProductTD" + index).remove();
                                $("#ErrorArea").html("");
                            }
                            return true;
                        }else
                        {
                            return false;
                        }
                    }
                    return false;
                }
            }
        });
    }
    function deleteProduct(id){
        var productId = $("#ProductId" + id).val();
        var message = confirm("Bạn có muốn xóa sản phẩm này?")
        $.ajax({
            type: "DELETE",
            url: '@Url.Action("DeleteProduct", "Product")',
            data: { id: id},
            cache: true,
            success: function (result) {
                if(message == true)
                {
                    $("#product_"+id).remove();
                    return true;
                }else 
                {
                    return false;
                }
                    
            }
        });

    }
    function saveCorrectProduct(products) {

        $('#ProductTable tr').each(function (index) {
            console.log(index);
            $(this).find('td').each(function (i) {
                //do your stuff, you can use $(this) to get current cell
                if (index > 0) {
                    if (i == 0) {
                        console.log($(this).text());
                    }
                    var td = $(this);
                    if (td.find('input')) {
                        console.log(td.find('input').val());
                    }
                }
            })
        })
    }
    function setTable(what){
        if(document.getElementById(what).style.display=="none"){
            document.getElementById(what).style.display="block";
        }
        else if(document.getElementById(what).style.display=="block"){
            document.getElementById(what).style.display="none";
        }
    }

       

    function Product(id,checkbox ,productName, productMarket, price, checked) {
        this.id = id;
        this.checkbox = checkbox;
        this.productName = productName;
        this.productMarket = productMarket;
        this.price = price;
        this.checked = checked;
    }

    function mergeProduct(i) {
       
        var duplicateTable = $("#table_"+i);
        var listTr = duplicateTable.find("tr");
        var products = [];
        for(var j = 0; j < listTr.length; j++) {
            if(listTr[j].id != 'header_'+i) {
                var cells = listTr[j].cells;
                var checkbox = cells[0].childNodes[1].checked;
                var name = cells[1].innerHTML;
                var market = cells[2].innerHTML;
                var price = cells[3].innerHTML;
                var checked = cells[4].childNodes[1].checked;
                if(checkbox == true){
                    var product = new Product(j,checkbox,name,market,price,checked);
                    products.push(product);
                }
            }
        }
        if(products.length < 2)
        {
            alert("Vui lòng chọn ít nhất 2 sản phẩm.")
        } else
        {
            var testChecked = false;
            for (var c = 0; c < products.length; c++) {
                if(products[c].checked == false)
                {
                    testChecked = false;
                } else 
                {
                    testChecked = true;
                    break;
                }
            }
            if(testChecked == false)
            {
                alert("Vui lòng chọn giá của sản phẩm đã chọn.")
            } else {
                var productName = "";
                var productMarket = "";
                var productPrice;
                var nonstop = true;
                for(var n = 0; n < products.length && nonstop; n++) {
                    if(products[n].checked) {
                        var temp = products[0];
                        products[0] = products[n];
                        products[n] = temp;
                        nonstop = false;
                    }
                }
                for(var k = 0; k < products.length; k++) {
                    if (k != products.length) {
                        productName += products[k].productName + ";"

                    } else {
                        productName += products[k].productName;
                    }
                    productMarket = products[k].productMarket;
                    if (products[k].checked) {
                        productPrice = products[k].price;
                    }
                }
                
                var finalProduct = new Product(0, productName, productMarket, productPrice, true);
                    
                var id = parseInt($('#ProductTable tr:last #STT').html());
                var stt = parseInt($('#ProductTable tr:last #STT').html()) + 1;
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("UpdateSession", "Product")',
                        data: { ProductId: id, ProductName: productName, ProductMarketName: productMarket, ProductPrice: productPrice },
                        cache: true,
                        success: function (newId) {
                            var id = newId;
                            $("#ProductTable tr:last").after("<tr id='product_"+id+"' style='display: table-row;'><td id='STT'>" + stt + "</td><td style='width:187px'><input readonly value='" + productName +
                                                     "'></input></td><td style='width:202px'><input readonly value='" + productMarket + "'>" +
                                                    "</input></td><td style='width:176px'><input readonly value='" + productPrice + "'>" +
                                                    "</input></td><td><input type='button' value='X' style='color:red;font-weight:bold' onclick='deleteProduct("+id+")'></input><td></tr>")
                            // var testChecked = false;
                            for (var h = 0; h < products.length; h++) {
                                
                                if(h >0){
                                    
                                    if(products[h].id != 1){
                                        $("#dupTable_"+i).find("tr")[products[h].id -h].remove();
                                    } 
                                    else
                                    {
                                        $("#dupTable_"+i).find("tr")[products[h].id ].remove();
                                    }
                                } 
                                else
                                {
                                    $("#dupTable_"+i).find("tr")[products[h].id].remove();
                                }
                                if($("#dupTable_"+i).find("tr")[1] == null)
                                {
                                    $("#dupTable_"+i).remove();
                                }
                            }
                            
                            
                        }
                    });
                }
            }
        }
    
        function mergeAll(i)
        {
            var count = $("#_page_3").find("table").size();
            for (var i = 0; i < count.toString(); i++) {
           
                $("#dupTable_"+i).find("tr").find("input:checkbox").attr( 'checked', $( this ).is( ':checkbox' ) ? 'checked' : '' );
              
            }
        
            for (var j = 0; j < count.toString(); j++) {
                mergeProduct(j);
                // $("#combine_"+j).click()
            }
        }
        function split(i) 
        {
            var duplicateTable = $("#table_"+i);
            var listTr = duplicateTable.find("tr");
            var products = [];
            
            for(var j = 0; j < listTr.length; ++j) {
                if(listTr[j].id != 'header_'+i) {
                    var cells = listTr[j].cells;
                    var checkbox = cells[0].childNodes[1].checked;
                    var name = cells[1].innerHTML;
                    var market = cells[2].innerHTML;
                    var price = cells[3].innerHTML;
                    var checked = cells[4].childNodes[1].checked;
                    if(checkbox == true){
                        var product = new Product(j,checkbox,name,market,price,checked);
                        products.push(product);
                    }
                }
            }
            if(products.length < 1)
            {
                alert("Vui lòng chọn ít nhất 1 sản phẩm để tách.")
            } 
            else {
                var id = parseInt($('#ProductTable tr:last #STT').html());

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("UpdateSession", "Product")',
                data: { ProductId: id, ProductName: name, ProductMarketName: market, ProductPrice: price },
                cache: true,
                success: function (newId) {
                    var id = newId;
                    for (var k = 0; k < products.length; k++) {
                        var name = products[k].productName;
                        var market = products[k].productMarket;
                        var price = products[k].price;
                        var stt = parseInt($('#ProductTable tr:last #STT').html()) + 1;

                        $("#ProductTable tr:last").after("<tr id='product_"+newId+"' style='display: table-row;'><td id='STT'>" + stt + "</td><td style='width:187px'><input value='" + name +
                                               "'></input></td><td style='width:202px'><input value='" + market + "'>" +
                                              "</input></td><td style='width:176px'><input value='" + price + "'>" +
                                              "</input></td><td><input type='button' value='X' style='color:red;font-weight:bold' onclick='deleteProduct("+newId+")'></input><td></tr>")
                   
                        if(k >0)
                        {
                                if(products[k].id != 1){
                                  
                                    $("#dupTable_"+i).find("tr")[products[k].id -k].remove();
                                } 
                                else
                                {
                                    $("#dupTable_"+i).find("tr")[products[k].id].remove();
                                }
                        } 
                         else
                            {
                                $("#dupTable_"+i).find("tr")[products[k].id].remove();
                            }
                        
                        if($("#dupTable_"+i).find("tr")[1] == null)
                        {
                            $("#dupTable_"+i).remove();
                        }
                        
                    }
                }
            });
        }
    }
    function mergeProduct1(i) {
        var duplicateTable = $("#table_"+i);
        var listTr = duplicateTable.find("tr");
        var products = [];
       
        for(var j = 0; j < listTr.length; ++j) {
            if(listTr[j].id != 'header_'+i) {
                var cells = listTr[j].cells;
                var name = cells[0].innerHTML;
                var market = cells[1].innerHTML;
                var price = cells[2].innerHTML;
                var checked = cells[3].childNodes[1].checked;
                var product = new Product(j, name, market, price, checked);
                products.push(product);
            }
        }
        var productName = "";
        var productMarket = "";
        var productPrice;
        var nonstop = true;
        for(var n = 0; n < products.length && nonstop; n++) {
            //  if(products[n].checked) {
            var temp = products[0];
            products[0] = products[n+1];
            products[n+1] = temp;
            nonstop = false;
            //  }
        }
        for(var k = 0; k < products.length; k++) {
            if (k != products.length) {
                productName += products[k].productName + ";"

            } else {
                productName += products[k].productName;
            }
            productMarket = products[k].productMarket;
            if (products[k].checked) {
                productPrice = products[k].price;
            }
        }
        if(productPrice == null)
        {
            alert("Vui lòng chọn giá của sản phẩm.")
        } else {
            var finalProduct = new Product(0, productName, productMarket, productPrice, true);
            var stt = parseInt($('#dupSellProductTable tr:last #STT1').html()) + 1;
            if (stt.toString() == "NaN")
            {
                stt = 1;
            }
            var id = parseInt($('#dupSellProductTable tr:last #STT1').html());
                
                 @*$.ajax({
            type: "POST",
            url: '@Url.Action("MergeProduct", "Product")',
                data: { ProductName: productName},
                cache: true,
                success: function (){ *@
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("MergeProduct", "Product")',
                    data: { ProductId: id, ProductName: productName, ProductMarketName: productMarket, ProductPrice: productPrice },
                    cache: true,
                    success: function (newId) {
                        var id = newId;
                        $("#dupSellProductTable tr:last").after("<tr id='product_"+newId+"' style='display: table-row;'><td id='STT1'>" + stt + "</td><td style='width:187px'><input readonly value='" + productName +
                                                 "'></input></td><td style='width:202px'><input readonly value='" + productMarket + "'>" +
                                                "</input></td><td style='width:176px'><input readonly value='" + productPrice + "'>" +
                                                "</input></td><td><input type='button' value='X' style='color:red;font-weight:bold' onclick='deleteProduct("+id+")'></input><td></tr>")
                        $("#dupTable_"+i).remove();
                    }
                });
                
            
            }
        }

        function split1(i) 
        {
            var duplicateTable = $("#table_"+i);
            var listTr = duplicateTable.find("tr");
            var products = [];
            var stt = parseInt($('#dupSellProductTable tr:last #STT1').html()) + 1;
            if (stt.toString() == "NaN")
            {
                stt = 1;
            }
            var id = parseInt($('#dupSellProductTable tr:last #STT1').html());
            for(var j = 0; j < listTr.length; ++j) {
                if(listTr[j].id != 'header_'+i) {
                    var cells = listTr[j].cells;
                    var name = cells[0].innerHTML;
                    var market = cells[1].innerHTML;
                    var price = cells[2].innerHTML;
                    var checked = cells[3].childNodes[1].checked;
                    var product = new Product(j, name, market, price, checked);
                    products.push(product);
                    $("##ProductTable tr:last").after("<tr id='product_"+id+"' style='display: table-row;'><td id='STT1'>" + stt + "</td><td style='width:187px'><input value='" + name +
                                           "'></input></td><td style='width:202px'><input value='" + market + "'>" +
                                          "</input></td><td style='width:176px'><input value='" + price + "'>" +
                                          "</input></td><td><input type='button' value='X' style='color:red;font-weight:bold' onclick='deleteProduct("+id+")'></input><td></tr>")
                    stt = stt + 1;
                    id = id +1;
                }
            }
            $("#dupTable_"+i).remove();
        }
    
        function splitAll(i)
        {
            var count = $("#_page_3").find("table").size();
            for (var i = 0; i < count.toString(); i++) {
           
                $("#dupTable_"+i).find("tr").find("input:checkbox").attr( 'checked', $( this ).is( ':checkbox' ) ? 'checked' : '' );
              
            }
        
            for (var j = 0; j < count.toString(); j++) {
                split(j);
                // $("#combine_"+j).click()
            }
                
        }
        
</script>
<!--Css cho Pagging -->
<style>
    .pager {
        margin: 0 0;
    }

    div.pager span {
        display: inline-block;
        padding: 2px 9px;
        font-size: 11.844px;
        font-weight: bold;
        line-height: 14px;
        color: #ffffff;
        text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
        white-space: nowrap;
        vertical-align: baseline;
        background-color: #3a87ad; /*padding-right: 9px;
  padding-left: 9px;*/
        -webkit-border-radius: 9px;
        -moz-border-radius: 9px;
        border-radius: 9px;
    }

        div.pager span.active {
            background-color: #c00;
        }
</style>
<h2 style="font-size: x-large; font-weight: bold" class="strong">Thêm Sản Phẩm</h2>

<form action="/Product/UploadProduct" enctype="multipart/form-data" method="post">
    <input type="file" id="excelFile" name="excelFile" />
    <input type="submit" value="Tải lên!" />
</form>
<div class="tab-control" data-role="tab-control">
    <ul class="tabs">
        <li class="active"><a href="#_page_1">Danh Sách Sản Phẩm</a></li>
        <li><a href="#_pageError">Sản Phẩm lỗi</a></li>
        <li><a href="#_page_3">Sản phẩm trùng</a></li>
    </ul>

    <div class="frames">
        <div class="frame" id="_page_1">
            @using (Html.BeginForm("SaveProducts", "Product"))
            {
                if (@ViewBag.dupSellProduct != null)
                {
                    if (@ViewBag.countInsert != null || @ViewBag.countUpdate != null)
                    {
                        if (@ViewBag.countInsert.ToString() != "Có 0 sản phẩm được lưu mới." & @ViewBag.countUpdate.ToString() != "Có 0 sản phẩm được cập nhật giá.")
                        {
                <label style="color: blue; font-weight: bold; font-size: larger">@ViewBag.countUpdate </label>
                <label style="color: blue; font-weight: bold; font-size: larger">@ViewBag.countInsert</label>
                <label style="color: blue; font-weight: bold; font-size: larger">
                    Có <b>@ViewBag.dupSellProduct.Count </b>sản phẩm bị trùng 
                </label>
                        }
                        else if (@ViewBag.countInsert.ToString() == "Có 0 sản phẩm được lưu mới." & @ViewBag.countUpdate.ToString() != "Có 0 sản phẩm được cập nhật giá.")
                        { 
                <label style="color: blue; font-weight: bold; font-size: larger">@ViewBag.countUpdate </label>
                <label style="color: blue; font-weight: bold; font-size: larger">
                    Có <b>@ViewBag.dupSellProduct.Count </b>sản phẩm bị trùng 
                </label>
                        }
                        else if (@ViewBag.countInsert.ToString() != "Có 0 sản phẩm được lưu mới." & @ViewBag.countUpdate.ToString() == "Có 0 sản phẩm được cập nhật giá.")
                        {
                <label style="color: blue; font-weight: bold; font-size: larger">@ViewBag.countInsert</label>
                <label style="color: blue; font-weight: bold; font-size: larger">
                    Có <b>@ViewBag.dupSellProduct.Count </b>sản phẩm bị trùng 
                </label>
                        }
                        else if (@ViewBag.countInsert.ToString() == "Có 0 sản phẩm được lưu mới." & @ViewBag.countUpdate.ToString() == "Có 0 sản phẩm được cập nhật giá.")
                        {
                <label style="color: blue; font-weight: bold; font-size: larger">Không có sản phẩm được lưu mới hoặc cập nhật giá </label>
                <label style="color: blue; font-weight: bold; font-size: larger">
                    Có <b>@ViewBag.dupSellProduct.Count </b>sản phẩm bị trùng 
                </label>
                        }
                    }
                }
                else
                    if (@ViewBag.countInsert != null || @ViewBag.countUpdate != null)
                    {
                        if (@ViewBag.countInsert.ToString() != "Có 0 sản phẩm được lưu mới." & @ViewBag.countUpdate.ToString() != "Có 0 sản phẩm được cập nhật giá.")
                        {
                <label style="color: blue; font-weight: bold; font-size: larger">@ViewBag.countUpdate </label>
                <label style="color: blue; font-weight: bold; font-size: larger">@ViewBag.countInsert</label>
                        }
                        else if (@ViewBag.countInsert.ToString() == "Có 0 sản phẩm được lưu mới." & @ViewBag.countUpdate.ToString() != "Có 0 sản phẩm được cập nhật giá.")
                        { 
                <label style="color: blue; font-weight: bold; font-size: larger">@ViewBag.countUpdate </label>
                        }
                        else if (@ViewBag.countInsert.ToString() != "Có 0 sản phẩm được lưu mới." & @ViewBag.countUpdate.ToString() == "Có 0 sản phẩm được cập nhật giá.")
                        {
                <label style="color: blue; font-weight: bold; font-size: larger">@ViewBag.countInsert</label>
                        }
                        else if (@ViewBag.countInsert.ToString() == "Có 0 sản phẩm được lưu mới." & @ViewBag.countUpdate.ToString() == "Có 0 sản phẩm được cập nhật giá.")
                        {
                <label style="color: blue; font-weight: bold; font-size: larger">Không có sản phẩm được lưu mới hoặc cập nhật giá </label>
                        }
                    }
                if (@ViewBag.errorCount >= 5)
                {
                <label style="color: red; font-weight: bold; font-size: larger">
                    <text>File có quá nhiều lỗi.</text>
                    <br />
                    <text>Vui lòng chỉnh sửa lại đúng thông tin.</text>
                </label>
                }
                if (@ViewBag.ExceptionName == "External table is not in the expected format.")
                {
                <label style="color: red; font-weight: bold; font-size: larger">
                    <text>File không đúng định dạng.</text>
                    <br />
                    <text>Vui lòng chọn định dạng file Excel.</text>
                </label>
                }

                if (Model != null && @ViewBag.errorCount < 5 && @ViewBag.ExceptionName != "External table is not in the expected format.")
                {
                <table class="table" id="ProductTable">
                    <lable style="font-size: x-large; font-weight: bold; color: blue">Danh sách sản phẩm 
                            @*(@ViewBag.CorrectSellProductsCount sản phẩm)*@
                        </lable>
                    <tr style="font-size: 14px; line-height: 14pt; padding: 8px; border-bottom: 1px #eaeaea solid; font-weight: bold">
                        <td style="padding: 8px; width: 55px;">STT</td>
                        <td style="padding: 8px; width: 187px;">Tên Sản Phẩm</td>
                        <td style="padding: 8px; width: 202px;">Tên Chợ</td>
                        <td style="padding: 8px; width: 176px;">Giá (Ngàn đồng)</td>
                        <td></td>
                    </tr>

                    @for (int i = 0; i < Model.CorrectSellProducts.Count; i++)
                    {
                        <tr id="product_@i">
                            <td style="display: none">@Html.DisplayTextFor(model => model.CorrectSellProducts[i].Id)</td>
                            <td style="padding: 8px; width: 55px;" id="STT">@(i + 1)</td>
                            @if (@Model.CorrectSellProducts[i].Name.Length < 5 || @Model.CorrectSellProducts[i].Name.Length > 100)
                            {
                                <td style="color: red; width: 187px">@Html.TextBoxFor(model => model.CorrectSellProducts[i].Name, new { style = "color: red;font-weight:bold; width: 155px" })</td>
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.CorrectSellProducts[i].Name)</p>
                                </span>
                            }
                            else
                            {
                                <td style="width: 187px">@Html.TextBoxFor(model => model.CorrectSellProducts[i].Name, new { @readonly = "readonly" })</td>
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.CorrectSellProducts[i].Name)</p>
                                </span>
                            }
                            @if (@Model.CorrectSellProducts[i].MarketName.Length < 5 || @Model.CorrectSellProducts[i].MarketName.Length > 20)
                            {
                                <td style="color: red; width: 202px">@Html.TextBoxFor(model => model.CorrectSellProducts[i].MarketName, new { style = "color: red;font-weight:bold; width: 155px" })</td>       
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.CorrectSellProducts[i].MarketName)</p>
                                </span>
                            }
                            else
                            {
                                <td style="width: 202px">@Html.TextBoxFor(model => model.CorrectSellProducts[i].MarketName, new { @readonly = "readonly" })</td> 
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.CorrectSellProducts[i].MarketName)</p>
                                </span>
                                       
                            }
                            @if (@Model.CorrectSellProducts[i].Price < 1 || @Model.CorrectSellProducts[i].Price > 10000)
                            {
                                <td style="color: red; width: 176px">@Html.TextBoxFor(model => model.CorrectSellProducts[i].Price, new { style = "color: red;font-weight:bold; width: 155px" })</td>
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.CorrectSellProducts[i].Price)</p>
                                </span>
                            }
                            else
                            {
                                <td style="width: 176px">@Html.TextBoxFor(model => model.CorrectSellProducts[i].Price, new { @readonly = "readonly" })</td>
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.CorrectSellProducts[i].Price)</p>
                                </span>
                            }
                            <td>
                                <input type="button" value="X" style="color:red;font-weight:bold" onclick="deleteProduct(@i)"></input></td>
                        </tr>
                    }

                </table> 
                
                   
                <br />
                    if (@ViewBag.ExceptionName != "External table is not in the expected format.")
                    {
                <input class="primary" type="submit" name="Lưu lại" value="Lưu lại" />
                <input class="bg-gray fg-white" value="Hủy" type="button" onclick='window.location = "/Product/UploadProduct"' />
                    }
                }
                //View sản phẩm trùng với DB              
                if (@ViewBag.dupSellProduct != null)
                {
                <table class="table" id="dupSellProductTable">
                    <lable style="font-size: x-large; font-weight: bold; color: blue">Danh sách sản phẩm 
                        </lable>
                    <tr style="font-size: 14px; line-height: 14pt; padding: 8px; border-bottom: 1px #eaeaea solid; font-weight: bold">
                        <td style="padding: 8px; width: 55px;">STT</td>
                        <td style="padding: 8px; width: 187px;">Tên Sản Phẩm</td>
                        <td style="padding: 8px; width: 202px;">Tên Chợ</td>
                        <td style="padding: 8px; width: 176px;">Giá (Ngàn đồng)</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td style="display: none"></td>
                        <td style="padding: 8px; width: 55px;" id="STT1"></td>

                        <td style="width: 187px"></td>

                        <td style="width: 202px"></td>

                        <td style="width: 176px"></td>

                    </tr>

                </table> 
                <input class="primary" type="submit" name="Lưu lại" value="Lưu lại" />
                <input class="bg-gray fg-white" value="Hủy" type="button" onclick='window.location = "/Product/UploadProduct"' />
                }
                else if (Model != null && @ViewBag.errorCount >= 5)
                {
                <div id="ErrorLinesArea">
                    <label style="color: red">Tên sản phẩm phải từ 5 đến 100 ký tự</label>
                    <lable><b style="font-weight:bold;color:blue">Dòng:</b> @for (int i = 0; i < @ViewBag.ErrorNameLines.Count; i++)
                                                                            {
                                     @ViewBag.ErrorNameLines[i] <b>,</b>   
                                                                            }  </lable>
                    <label style="color: red">Tên chợ phải từ 5 đến 20 ký tự</label>
                    <lable><b style="font-weight:bold;color:blue">Dòng:</b> @for (int i = 0; i < @ViewBag.ErrorMarketNameLines.Count; i++)
                                                                            {
                                     @ViewBag.ErrorMarketNameLines[i] <b>,</b>    
                                                                            }  </lable>
                    <label style="color: red">Giá phải từ 1 đến 10000</label>
                    <lable><b style="font-weight:bold;color:blue">Dòng:</b> @for (int i = 0; i < @ViewBag.ErrorPriceLines.Count; i++)
                                                                            {
                                     @ViewBag.ErrorPriceLines[i] <b>,</b>    
                                                                            }  </lable>
                </div> <br />
                <input href="#" onclick="setTable('tableProductError');return false" value="Ẩn/Hiện chi tiết" type="button" style="font-weight: bold" />
                                                                            // Table nhiều hơn 5 lỗi            
                <div id="tableProductError" style="display: none;">
                    <lable style="font-size: x-large; font-weight: bold; color: blue">Danh sách sản phẩm bị lỗi</lable>
                    <table class="table">
                        <tr style="font-size: 14px; line-height: 14pt; padding: 8px; border-bottom: 1px #eaeaea solid; font-weight: bold">
                            <td style="padding: 8px; width: 55px;">Số dòng</td>
                            <td style="padding: 8px; width: 187px;">Tên Sản Phẩm</td>
                            <td style="padding: 8px; width: 202px;">Tên Chợ</td>
                            <td style="padding: 8px; width: 176px;">Giá (Ngàn đồng)</td>
                        </tr>

                        @for (int i = 0; i < Model.InCorrectSellProducts.Count; i++)
                        {
                            <tr>
                                @Html.HiddenFor(model => model.InCorrectSellProducts[i].Id)
                                <td style="padding: 8px; width: 100px;">@Model.InCorrectSellProducts[i].RowNumber</td>
                                @if (@Model.InCorrectSellProducts[i].Name.Length < 5 || @Model.InCorrectSellProducts[i].Name.Length > 100)
                                {
                                    <td style="color: red; width: 187px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].Name, new { style = "color: red;font-weight:bold; width: 155px", @readonly = "readonly" })</td>
                                    <span>
                                        <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].Name)</p>
                                    </span>
                                }
                                else
                                {
                                    <td style="width: 187px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].Name, new { disabled = "disabled", @readonly = "readonly" })</td>
                                    <span>
                                        <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].Name)</p>
                                    </span>
                                }
                                @if (@Model.InCorrectSellProducts[i].MarketName.Length < 5 || @Model.InCorrectSellProducts[i].MarketName.Length > 20)
                                {
                                    <td style="color: red; width: 202px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].MarketName, new { style = "color: red;font-weight:bold; width: 155px", @readonly = "readonly" })</td>       
                                    <span>
                                        <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].MarketName)</p>
                                    </span>
                                }
                                else
                                {
                                    <td style="width: 202px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].MarketName, new { disabled = "disabled", @readonly = "readonly" })</td> 
                                    <span>
                                        <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].MarketName)</p>
                                    </span>
                                       
                                }
                                @if (@Model.InCorrectSellProducts[i].Price < 1 || @Model.InCorrectSellProducts[i].Price > 10000)
                                {
                                    <td style="color: red; width: 176px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].Price, new { style = "color: red;font-weight:bold; width: 155px", @readonly = "readonly" })</td>
                                    <span>
                                        <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].Price)</p>
                                    </span>
                                }
                                else
                                {
                                    <td style="width: 176px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].Price, new { disabled = "disabled", @readonly = "readonly" })</td>
                                    <span>
                                        <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].Price)</p>
                                    </span>
                                }

                            </tr>
                        }
                    </table>
                </div>
                }
            }
        </div>

        <div class="frame" id="_pageError">

            @if (Model != null && @ViewBag.errorCount < 5 && @ViewBag.ExceptionName != "External table is not in the expected format.")
            {
                if (@ViewBag.errorCount > 0)
                {
                <div id="ErrorArea">
                    @if (@ViewBag.ExceptionName == "Tên sản phẩm phải từ 5 đến 100 ký tự")
                    {
                        <label style="color: red">@ViewBag.ExceptionName</label>
                    }
                    @if (@ViewBag.ExceptionMarket == "Tên chợ phải từ 5 đến 20 ký tự")
                    {
                        <label style="color: red">@ViewBag.ExceptionMarket</label>
                    }
                    @if (@ViewBag.ExceptionPrice == "Giá phải từ 1 đến 10000")
                    {
                        <label style="color: red">@ViewBag.ExceptionPrice</label>
                    }
                </div>
                <table class="table1" id="ErrorProduct">

                    <lable style="font-size: x-large; font-weight: bold; color: blue">Danh sách sản phẩm bị lỗi 
            @*(<text style="font-size: x-large; font-weight: bold;color:red">@ViewBag.InCorrectSellProductsCount lỗi</text>)*@
        </lable>
                    <tr style="font-size: 14px; line-height: 14pt; padding: 8px; border-bottom: 1px #eaeaea solid; font-weight: bold">
                        <td style="padding: 8px; width: 55px;">STT</td>
                        <td style="padding: 8px; width: 187px;">Tên Sản Phẩm</td>
                        <td style="padding: 8px; width: 202px;">Tên Chợ</td>
                        <td style="padding: 8px; width: 176px;">Giá (Ngàn đồng)</td>
                    </tr>

                    @for (int i = 0; i < Model.InCorrectSellProducts.Count; i++)
                    {
                        <tr id="@("ErrorProductTD" + @i)">
                            @Html.HiddenFor(model => model.InCorrectSellProducts[i].Id, new { id = "ProductId" + i })
                            <td style="padding: 8px; width: 55px;">@(i + 1)</td>
                            @if (@Model.InCorrectSellProducts[i].Name.Length < 5 || @Model.InCorrectSellProducts[i].Name.Length > 100)
                            {
                                <td style="color: red; width: 187px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].Name, new { style = "color: red;font-weight:bold; width: 155px", id = "ProductName" + i })</td>
                                <span class="help-block" id="productNameAlert" style="color: Red"></span>
                            }
                            else
                            {
                                <td style="width: 187px" id="">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].Name, new { id = "ProductName" + i })</td>
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].Name)</p>
                                </span>
                            }
                            @if (@Model.InCorrectSellProducts[i].MarketName.Length < 5 || @Model.InCorrectSellProducts[i].MarketName.Length > 20)
                            {
                                <td style="color: red; width: 202px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].MarketName, new { style = "color: red;font-weight:bold; width: 155px", id = "ProductMarketName" + i })</td>       
                                <span class="help-block" id="marketNameAlert" style="color: Red"></span>
                            }
                            else
                            {
                                <td style="width: 202px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].MarketName, new { id = "ProductMarketName" + i })</td> 
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].MarketName)</p>
                                </span>
                            }
                            @if (@Model.InCorrectSellProducts[i].Price < 1 || @Model.InCorrectSellProducts[i].Price > 10000)
                            {
                                <td style="color: red; width: 176px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].Price, new { style = "color: red;font-weight:bold; width: 155px", id = "ProductPrice" + i })</td>
                                <span class="help-block" id="priceAlert" style="color: Red"></span>
                            }
                            else
                            {
                                <td style="width: 176px">@Html.TextBoxFor(model => model.InCorrectSellProducts[i].Price, new { id = "ProductPrice" + i })</td>
                                <span>
                                    <p style="color: Red">@Html.ValidationMessageFor(model => model.InCorrectSellProducts[i].Price)</p>
                                </span>
                            }
                            <td class="primary">
                                <input class="primary" type="button" value="Lưu" onclick="saveProduct(@i,@Model.CorrectSellProducts.Count)"></input></td>
                        </tr>
                    }
                </table>
                }
            }
        </div>
        <div class="frame" id="_page_3">
            @if (@ViewBag.duplicateCorrectProduct != null)
            {
                for (int i = 0; i < @ViewBag.duplicateCorrectProduct.Count; i++)
                {
                <div  style="border-style:dotted;border-width:2px" id="dupTable_@i">
                    <table id="table_@i">
                        <tr id="header_@i" style="font-size: 14px; line-height: 14pt; padding: 8px; border-bottom: 1px #eaeaea solid; font-weight: bold">
                            <td></td>
                            <td style="padding: 8px; width: 187px;">Tên Sản Phẩm</td>
                            <td style="padding: 8px; width: 202px;">Tên Chợ</td>
                            <td style="padding: 8px; width: 176px;">Giá (Ngàn đồng)</td>
                            <td>Chọn giá</td>
                        </tr>
                        @* @foreach (var item in @ViewBag.duplicateCorrectProduct[i])
                        {
                            <tr>
                                <td><input type="checkbox"/></td>
                                <td>@item.Name</td>
                                <td>@item.MarketName</td>
                                <td>@item.Price</td>
                                @if (@item.first = true)
                                {
                                <td><input type="radio" name=""  id="Check_@i" checked/></td>
                                } else 
                                {
                                    <td><input type="radio" name="productPrice"  id="Check_@i" /></td>
                                }
                            </tr>  
                        }*@
                        @for (int j = 0; j < @ViewBag.duplicateCorrectProduct[i].Count; j++)
                        {
                            <tr>
                                @if (j == 0)
                                {
                                    <td>
                                        <input type="checkbox" checked /></td>
                                    <td>@ViewBag.duplicateCorrectProduct[i][j].Name</td>
                                    <td>@ViewBag.duplicateCorrectProduct[i][j].MarketName</td>
                                    <td>@ViewBag.duplicateCorrectProduct[i][j].Price</td>
                                    <td>
                                        <input type="radio" name="productPrice_@i"  id="Check_@i" checked="checked"/></td>
                                }
                                else
                                {
                                    <td>
                                        <input type="checkbox" /></td>
                                    <td>@ViewBag.duplicateCorrectProduct[i][j].Name</td>
                                    <td>@ViewBag.duplicateCorrectProduct[i][j].MarketName</td>
                                    <td>@ViewBag.duplicateCorrectProduct[i][j].Price</td>
                                    <td>
                                        <input type="radio" name="productPrice_@i"  id="Check_@i" /></td>
                                }
                            </tr>  
                        }
                    </table>
                    <br />
                    <input type="button" value="Gộp" onclick="mergeProduct(@i)" class="primary" style="margin-left: 525px;" id="combine_@i" />
                    <input type="button" value="Tách"  onclick="split(@i)" id="split_@i" />
                </div>
                <br />
                }
            }
            @if (@ViewBag.dupSellProduct != null)
            {
                for (int i = 0; i < @ViewBag.dupSellProduct.Count; i++)
                {
                <div  style="border-style:dotted;border-width:2px" id="dupTable_@i">
                    <table id="table_@i">
                        <tr id="header_@i" style="font-size: 14px; line-height: 14pt; padding: 8px; border-bottom: 1px #eaeaea solid; font-weight: bold">
                            <td style="padding: 8px; width: 187px;">Tên Sản Phẩm</td>
                            <td style="padding: 8px; width: 202px;">Tên Chợ</td>
                            <td style="padding: 8px; width: 176px;">Giá (Ngàn đồng)</td>
                            <td></td>
                        </tr>
                        @foreach (var item in @ViewBag.dupSellProduct[i])
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.MarketName</td>
                                <td>@item.Price</td>
                                <td>
                                    <input type="radio" name="productPrice"  id="Check_@i"/></td>
                            </tr>  
                        }
                    </table>
                    <br />
                    <input type="button" value="Gộp" onclick="mergeProduct1(@i)" class="primary" style="margin-left: 525px;" />
                    <input type="button" value="Tách"  onclick="split1(@i)" />
                </div>
                <br />
                }
            }
            <input type="button" value="Gộp tất cả" onclick="mergeAll()" />
            <input type="button" value="Tách tất cả" onclick="splitAll()" />
        </div>
    </div>
</div>

